#!/bin/bash -e

# Enable debugging if DEBUG is set
if [[ ${DEBUG} -gt 0 ]]; then set -x; fi

# Redirect stdout to a log file but keep fd 3 for results
exec 3>&1
exec &>> /var/log/bash-cni-plugin.log

IP_STORE=/tmp/reserved_ips # Reserved IPs will be stored here

echo "CNI command: $CNI_COMMAND"

# Read stdin for JSON input
stdin=$(cat /dev/stdin)
echo "stdin: $stdin"

# Function to allocate an available IP
allocate_ip() {
    for ip in "${all_ips[@]}"; do
        reserved=false
        for reserved_ip in "${reserved_ips[@]}"; do
            if [ "$ip" = "$reserved_ip" ]; then
                reserved=true
                break
            fi
        done
        if [ "$reserved" = false ]; then
            echo "$ip" >> $IP_STORE
            echo "$ip"
            return
        fi
    done
}

case $CNI_COMMAND in
ADD)
    # Extract network and subnet from stdin
    subnet=$(echo "$stdin" | jq -r ".subnet")
    subnet_mask_size=$(echo "$subnet" | awk -F "/" '{print $2}')

    # Generate a list of all possible IPs in the subnet
    all_ips=($(nmap -sL $subnet | grep "Nmap scan report" | awk '{print $NF}' | tr -d '()'))


    # Reserve the first two IPs (subnet IP and gateway IP)
    skip_ip=${all_ips[0]}
    gw_ip=${all_ips[1]}
    reserved_ips=$(cat $IP_STORE 2>/dev/null || printf "$skip_ip\n$gw_ip\n")
    reserved_ips=(${reserved_ips[@]})
    printf '%s\n' "${reserved_ips[@]}" > $IP_STORE

    # Allocate an IP for the container
    container_ip=$(allocate_ip | tr -d '()')
    echo "Allocated container IP: $container_ip"

    # Ensure the network namespace directory exists
    mkdir -p /var/run/netns/
    ln -sfT $CNI_NETNS /var/run/netns/$CNI_CONTAINERID

    # Create a veth pair for the container
    rand=$(tr -dc 'A-F0-9' < /dev/urandom | head -c4)
    host_if_name="veth$rand"
    ip link add $CNI_IFNAME type veth peer name $host_if_name

    # Set up the host interface
    ip link set $host_if_name up
    ip link set $host_if_name master cni0

    # Configure the container's network namespace
    ip link set $CNI_IFNAME netns $CNI_CONTAINERID
    ip netns exec $CNI_CONTAINERID ip link set $CNI_IFNAME up
    ip netns exec $CNI_CONTAINERID ip addr add $container_ip/$subnet_mask_size dev $CNI_IFNAME
    ip netns exec $CNI_CONTAINERID ip route add default via $gw_ip dev $CNI_IFNAME

    # Retrieve MAC address for the container interface
    mac=$(ip netns exec $CNI_CONTAINERID ip link show $CNI_IFNAME | awk '/ether/ {print $2}')

    # Output the CNI result JSON
    echo "{
      \"cniVersion\": \"0.4.0\",
      \"interfaces\": [
          {
              \"name\": \"eth0\",
              \"mac\": \"$mac\",
              \"sandbox\": \"$CNI_NETNS\"
          }
      ],
      \"ips\": [
          {
              \"version\": \"4\",
              \"address\": \"$container_ip/$subnet_mask_size\",
              \"gateway\": \"$gw_ip\",
              \"interface\": 0
          }
      ]
    }" >&3
    ;;

DEL)
    # Remove the container's IP from the reserved list
    ip=$(ip netns exec $CNI_CONTAINERID ip addr show eth0 | awk '/inet / {print $2}' | sed 's%/.*%%' || echo "")
    if [ ! -z "$ip" ]; then
        sed -i "/$ip/d" $IP_STORE
    fi
    ;;

GET)
    echo "GET not supported"
    exit 1
    ;;

VERSION)
    echo '{
      "cniVersion": "0.4.0",
      "supportedVersions": [ "0.3.0", "0.3.1", "0.4.0" ]
    }' >&3
    ;;

*)
    echo "Unknown CNI command: $CNI_COMMAND"
    exit 1
    ;;
esac


